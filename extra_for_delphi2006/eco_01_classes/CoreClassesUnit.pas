unit CoreClassesUnit;

interface

uses
  System.ComponentModel,
  System.Collections,
  Borland.Eco.Services,
  Borland.Eco.ObjectRepresentation,
  Borland.Eco.ObjectImplementation,
  Borland.Eco.UmlRt,
  Borland.Eco.UmlCodeAttributes;

type
  Person = class;
  [UmlElement('Package', Id='68231c82-c77b-4a9a-8270-92bbb95f4ab7')]
  [EcoCodeGenVersion('2.0')]
  [UmlMetaAttribute('ownedElement', TypeOf(Person))]
  CoreClasses = class
  end;

  [assembly: RuntimeRequiredAttribute(TypeOf(CoreClasses))]
  [UmlCollection(TypeOf(Person))]
  IPersonList = interface(ICollection)
    {$REGION 'ECO generated code'}
    function get_Item(index: Integer): Person;
    procedure set_Item(index: Integer; Value: Person);
    property Item[index: Integer]: Person read get_Item write set_Item; default;
    function Add(value: Person): Integer;
    function Contains(value: Person): Boolean;
    function IndexOf(value: Person): Integer;
    procedure Insert(index: Integer; value: Person);
    procedure Remove(value: Person);
    procedure Clear;
    procedure RemoveAt(index: Integer);
    {$ENDREGION 'ECO generated code'}
  end;
  [UmlElement(Id='7b4be22e-ec93-4089-9708-536bfe5fff4e')]
  Person = class(System.Object, ILoopBack)
  public
  type
    Eco_LoopbackIndices = class
    public
    const
      Eco_FirstMember = 0;
    const
      Eco_MemberCount = (Eco_FirstMember + 0);
    end;

    PersonListAdapter = class(ObjectListAdapter, IPersonList)
    public
      constructor Create(source: IList);
      function get_Item(index: Integer): Person;
      procedure set_Item(index: Integer; Value: Person);
      property Item[index: Integer]: Person read get_Item write set_Item; default;
      function Add(value: Person): Integer;
      function Contains(value: Person): Boolean;
      function IndexOf(value: Person): Integer;
      procedure Insert(index: Integer; value: Person);
      procedure Remove(value: Person);
    end;
  protected
  strict private
    function IObjectProvider.AsIObject = IObjectProvider_AsIObject;
    function IObjectProvider_AsIObject: IObject;
    {$REGION 'Autogenerated ECO code'}
  public
    constructor Create(content: IContent); overload;
    function get_MemberByIndex(index: Integer): System.Object; virtual;
    procedure set_MemberByIndex(index: Integer; value: System.Object); virtual;
    function AsIObject: IObjectInstance;
  strict protected
    eco_Content: IContent;
    procedure Initialize(serviceProvider: IEcoServiceProvider);
    procedure Deinitialize(serviceProvider: IEcoServiceProvider);
  strict private
    {$ENDREGION}
  public
    constructor Create(serviceProvider: IEcoServiceProvider); overload;
  end;

implementation

constructor Person.Create(content: IContent);
begin
  inherited Create;
  Self.eco_Content := content;
  content.AssertLoopbackUnassigned;
end;

function Person.get_MemberByIndex(index: Integer): System.Object;
begin
  raise System.IndexOutOfRangeException.Create;
end;

procedure Person.set_MemberByIndex(index: Integer; value: System.Object);
begin
  raise System.IndexOutOfRangeException.Create;
end;

procedure Person.Initialize(serviceProvider: IEcoServiceProvider);
var
  factory: IInternalObjectContentFactory;
begin
  if (Self.eco_Content = nil) then
  begin
    factory := (IInternalObjectContentFactory(serviceProvider.GetEcoService(TypeOf(IInternalObjectContentFactory))));
    Self.eco_Content := factory.CreateContent(Self);
    Self.eco_Content.LoopbackValid;
  end;
end;

procedure Person.Deinitialize(serviceProvider: IEcoServiceProvider);
var
  factory: IInternalObjectContentFactory;
begin
  if (Self.eco_Content <> nil) then
  begin
    factory := (IInternalObjectContentFactory(serviceProvider.GetEcoService(TypeOf(IInternalObjectContentFactory))));
    factory.CreateContentFailed(Self.eco_Content, Self);
    Self.eco_Content := nil;
  end;
end;
{$ENDREGION}

constructor Person.Create(serviceProvider: IEcoServiceProvider);
begin
  inherited Create;
  Self.Initialize(serviceProvider);
  try
    // If you add user code here, please remove the [EcoAutoMaintained] attribute
    // from the declaration in the interface section
  except
    on System.Exception do
    begin
      Self.Deinitialize(serviceProvider);
      raise;
    end;
  end;
end;

function Person.IObjectProvider_AsIObject: IObject;
begin
  Result := Self.eco_Content.AsIObject;
end;

function Person.AsIObject: IObjectInstance;
begin
  Result := Self.eco_Content.AsIObject;
end;

constructor Person.PersonListAdapter.Create(source: IList);
begin
  inherited Create(source);
end;

function Person.PersonListAdapter.get_Item(index: Integer): Person;
begin
  Result := (CoreClassesUnit.Person(inherited Adaptee[index]));
end;

procedure Person.PersonListAdapter.set_Item(index: Integer; Value: Person);
begin
  inherited Adaptee[index] := value;
end;

function Person.PersonListAdapter.Add(value: Person): Integer;
begin
  Result := Self.Adaptee.Add(value);
end;

function Person.PersonListAdapter.Contains(value: Person): Boolean;
begin
  Result := Self.Adaptee.Contains(value);
end;

function Person.PersonListAdapter.IndexOf(value: Person): Integer;
begin
  Result := Self.Adaptee.IndexOf(value);
end;

procedure Person.PersonListAdapter.Insert(index: Integer; value: Person);
begin
  Self.Adaptee.Insert(index, value);
end;

procedure Person.PersonListAdapter.Remove(value: Person);
begin
  Self.Adaptee.Remove(value);
end;







end.
